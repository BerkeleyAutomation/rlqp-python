name: Build

on: [push, pull_request]

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'
      
      - name: Install torch with pip
        run: pip3 install torch==1.8.1 -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html

      - name: Build sdist
        run: python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@master
      with:
        submodules: 'recursive'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      if: startsWith(matrix.os,'windows')
    - name: Add Windows SDK
      shell: cmd
      if: startsWith(matrix.os,'windows')
      run: |
        choco install windows-sdk-8.1
    
    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: '3.9'

    - name: Install cibuildwheel
      run: python3 -m pip install cibuildwheel==2.0.0

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        # Only build on Python 3 and skip 32-bit builds
        CIBW_BUILD: cp3?-*
        CIBW_SKIP: "*-win32 *-manylinux_i686"
        CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
        CIBW_TEST_REQUIRES: "pytest cvxopt"
        CIBW_BEFORE_BUILD: "pip install torch==1.8.1 -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
        CIBW_TEST_COMMAND: "pytest -s {project}/module/tests -k \"not codegen and not mkl\" "

    - uses: actions/upload-artifact@v2
      with:
        path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          repository_url: https://test.pypi.org/legacy/